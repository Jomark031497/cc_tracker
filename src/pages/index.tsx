import Head from 'next/head';
import { useModal } from '@/hooks/useModal';
import { Card, CreateCard, useCards } from '@/features/cards';
import { getServerAuthSession } from '@/server/auth';
import { GetServerSidePropsContext } from 'next';
import { Menu, Transition } from '@headlessui/react';
import { Fragment } from 'react';
import { IoMdAdd } from 'react-icons/io';
import { CreateTransaction, TransactionCard, useTransactions } from '@/features/transactions';
import { Button } from '@/components/Elements';

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  const session = await getServerAuthSession(ctx);
  if (!session) return { redirect: { destination: '/login', permanent: false } };
  return { props: {} };
};

export default function Home() {
  const { data: cards } = useCards();

  const { data: transactions } = useTransactions();

  const { close: closeCard, isOpen: isCardOpen, open: openCard } = useModal();
  const { close: closeTransaction, isOpen: isTransactionOpen, open: openTransaction } = useModal();

  return (
    <>
      <Head>
        <title>Dashboard | CC Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <section className="flex flex-col gap-4 mb-8">
          <div className="flex justify-between items-center">
            <p className="font-semibold text-lg">Accounts</p>
            <Menu as="div" className="relative inline-block text-left">
              <Menu.Button as={Button} variant="outlined">
                Manage
              </Menu.Button>

              <Transition
                as={Fragment}
                enter="transition ease-out duration-100"
                enterFrom="transform opacity-0 scale-95"
                enterTo="transform opacity-100 scale-100"
                leave="transition ease-in duration-75"
                leaveFrom="transform opacity-100 scale-100"
                leaveTo="transform opacity-0 scale-95"
              >
                <Menu.Items className="absolute mt-1 right-0 w-48 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                  <div className="px-1 py-1">
                    <Menu.Item>
                      {({ active }) => (
                        <button
                          onClick={() => openCard()}
                          className={`${
                            active ? 'bg-primary-main text-white' : 'text-gray-500'
                          } group flex w-full items-center transition-all rounded-md px-2 py-2 text-sm`}
                        >
                          <IoMdAdd className="text-lg mr-1" />
                          Add Card
                        </button>
                      )}
                    </Menu.Item>
                  </div>
                </Menu.Items>
              </Transition>
            </Menu>
          </div>

          <div className="flex flex-col gap-2 bg-white py-4 px-2 shadow-xl rounded-xl">
            {cards?.map((card) => (
              <Card key={card.id} card={card} />
            ))}
          </div>
        </section>

        <section className="flex flex-col gap-4 mb-8">
          <div className="flex justify-between items-center">
            <p className="font-semibold text-lg">Recent Transactions</p>
            <Button variant="outlined" onClick={() => openTransaction()}>
              Add Transaction
            </Button>
          </div>

          <div className="flex flex-col gap-2 py-4 px-2">
            {transactions?.map((transaction) => (
              <TransactionCard key={transaction.id} transaction={transaction} />
            ))}
          </div>
        </section>

        <CreateCard isOpen={isCardOpen} close={closeCard} />
        <CreateTransaction isOpen={isTransactionOpen} close={closeTransaction} />
      </>
    </>
  );
}

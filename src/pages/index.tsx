import Head from 'next/head';
import { useModal } from '@/hooks/useModal';
import { Card, CreateCard, useCards } from '@/features/cards';
import { Menu } from '@headlessui/react';
import { IoMdAdd } from 'react-icons/io';
import { CreateTransaction, TransactionCard, useTransactions } from '@/features/transactions';
import { Button, CardSkeleton, DropdownMenu } from '@/components/Elements';
import { cx } from '@/utils/combineClassNames';
import { getSession } from 'next-auth/react';
import { GetServerSidePropsContext } from 'next';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  return {
    props: { user: session.user },
  };
}

export default function Home() {
  const { data: cards, isLoading: isCardsLoading } = useCards();
  const { data: transactions, isLoading: isTransactionsLoading } = useTransactions();

  const { close: closeCard, isOpen: isCardOpen, open: openCard } = useModal();
  const { close: closeTransaction, isOpen: isTransactionOpen, open: openTransaction } = useModal();

  return (
    <>
      <Head>
        <title>Dashboard | CC Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <>
        <section className="mb-8 flex flex-col gap-4">
          <div className="flex items-center justify-between">
            <p className="font-semibold text-gray-500">Accounts</p>
            <DropdownMenu label="Manage">
              <Menu.Item>
                {({ active }) => (
                  <button
                    onClick={() => openCard()}
                    className={cx(
                      'flex w-full items-center rounded-md px-2 py-2 text-sm transition-all',
                      active ? 'bg-primary-main text-white' : 'text-gray-500',
                    )}
                  >
                    <IoMdAdd className="mr-1 text-lg" />
                    Add Card
                  </button>
                )}
              </Menu.Item>
            </DropdownMenu>
          </div>

          <div className="flex flex-col gap-2 rounded-xl bg-white px-2 py-4 shadow-xl">
            {!isCardsLoading ? (
              cards && cards.length ? (
                cards.map((card, index) => (
                  <motion.div
                    key={card.id}
                    initial={{ opacity: 0, x: -50 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                  >
                    <Card card={card} />
                  </motion.div>
                ))
              ) : (
                <div className="text-center">
                  <p className="mb-4 text-xs text-gray-500">You have no cards yet.</p>
                  <Button onClick={openCard}>Add Card</Button>
                </div>
              )
            ) : (
              <CardSkeleton />
            )}
          </div>
        </section>

        <section className="mb-8 flex flex-col gap-4">
          <div className="flex items-center justify-between">
            <p className="font-semibold text-gray-500">Recent Transactions</p>

            <Button
              variant="outlined"
              onClick={() => {
                if (!cards?.length)
                  return toast.error('No card found. You have to create a card first.');
                openTransaction();
              }}
            >
              Add Transaction
            </Button>
          </div>

          <div className="flex flex-col gap-2 px-2 py-4">
            {!isTransactionsLoading ? (
              transactions?.length ? (
                transactions?.map((transaction, index) => (
                  <motion.div
                    key={transaction.id}
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                  >
                    <TransactionCard transaction={transaction} />
                  </motion.div>
                ))
              ) : (
                <div>
                  <p className="mb-4 p-2 text-center text-xs text-gray-500">
                    You have no transactions yet.
                  </p>
                </div>
              )
            ) : (
              <>
                <CardSkeleton />
                <CardSkeleton />
                <CardSkeleton />
              </>
            )}
          </div>
        </section>

        <CreateCard isOpen={isCardOpen} close={closeCard} />
        <CreateTransaction isOpen={isTransactionOpen} close={closeTransaction} />
      </>
    </>
  );
}
